@page "/platby"
@inject IPaymentService PaymentService
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))




<div class="container mt-5">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="text-center mb-4 page-title">Platby</h3>
            <div class="input-group mb-4">
                <input type="text" class="form-control" placeholder="Hledat..." @oninput="SearchPayments" />
                <button class="btn btn-outline-secondary" type="button">Hledat</button>
            </div>
            <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary">
                    <i class="bi bi-plus"></i> Přidat platbu
                </button>
            </div>
            @if (payments == null || payments.Count == 0)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <p class="mt-2">Načítám platby...</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="w-100">
                        <QuickGrid Items="filteredPayments.AsQueryable()" Pagination="pagginationState" Class="w-100">
                            <PropertyColumn Title="Id" Property="@(r => r.Id)" Sortable="true" />
                            <PropertyColumn Title="Datum platby" Property="@(r => r.PaymentDate.ToShortDateString())" Sortable="true" />
                            <PropertyColumn Title="Částka" Property="@(r => r.TotalAmount.ToString("C"))" Sortable="true" />
                            <PropertyColumn Title="Způsob platby" Property="@(r => r.PaymentMethod)" Sortable="true" />
                            <PropertyColumn Title="Číslo faktury" Property="@(r => r.Invoice.Id)" Sortable="true" />
                            <TemplateColumn Title="Zákazník">
                                @if (context.Invoice.Reservation != null && context.Invoice.Reservation.Customer.FirstName != null)
                                {
                                    <span>@context.Invoice.Reservation.Customer.FirstName - @context.Invoice.Reservation.Customer.LastName - RČ: @context.Invoice.Reservation.Customer.PersonalIdentificationNumber </span>
                                }
                                else
                                {
                                    <span>N/A</span>
                                }
                            </TemplateColumn>


                            <TemplateColumn Title="Akce">
                                <div class="d-inline-flex">
                                    <button class="btn text-primary" @onclick="() => OpenEditModal(context.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn text-danger" @onclick="() => OpenDeleteConfirmation(context.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </TemplateColumn>

                        </QuickGrid>

                    </table>
                </div>
            }
        </div>
    </div>
</div>

<PaymentEditModal IsVisible="@isEditModalVisible" PaymentId="@selectedPaymentId" OnClose="CloseEditModal" />
<DeleteModal Title="Smazaní platby" ActionType="DeletePayment" IsVisible="@isModalVisible" OnClose="HandleModalClose" />



@code {
    private PaginationState pagginationState = new PaginationState() { ItemsPerPage = 10 };
    private List<Payment> payments = new List<Payment>();
    private List<Payment> filteredPayments = new List<Payment>();

    private string? searchTerm;
    private bool isEditModalVisible = false;
    private int selectedPaymentId;

    private bool isModalVisible = false;
    private int paymentIdToDelete;

    private void OpenEditModal(int id)
    {
        selectedPaymentId = id;
        isEditModalVisible = true;
    }

    private void OpenDeleteConfirmation(int id)
    {
        paymentIdToDelete = id;
        isModalVisible = true;
    }

    private async Task HandleModalClose(bool result)
    {
        var payment = payments.FirstOrDefault(r => r.Id == paymentIdToDelete);
        isModalVisible = false;

        if (result)
        {
            await PaymentService.DeletePaymentAsync(paymentIdToDelete);
            payments.Remove(payment);
            filteredPayments = payments;
        }
    }



    private async void CloseEditModal(bool result)
    {
        var payment = payments.FirstOrDefault(r => r.Id == selectedPaymentId);
        isEditModalVisible = false;

        if (result)
        {
            payments = await PaymentService.GetPaymentsAsync();
            filteredPayments = payments;

        }
    }



    protected override async Task OnInitializedAsync()
    {
        payments = await PaymentService.GetPaymentsAsync();
        filteredPayments = payments;
    }



    private void SearchPayments(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();

        @if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPayments = payments.Where(r => r.PaymentMethod.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || r.Invoice.Id.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || r.PaymentDate.ToShortDateString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || r.TotalAmount.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || r.Invoice.Reservation.Customer.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || r.Invoice.Reservation.Customer.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || r.Invoice.Reservation.Customer.PersonalIdentificationNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            
            ).ToList();
   
        }
        else
        {
            filteredPayments = payments;
        }


    }

    private void NavigateToPaymentDetail(int id)
    {
        NavigationManager.NavigateTo($"/platba/{id}");
    }



}