@page "/pokoj/{Id:int}"
@inject IRoomService RoomService
@inject IReservationService ReservationService
@inject IReviewService ReviewService
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer


<div class="container mt-2">
    @if (room == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only"></span>
            </div>
            <p class="mt-2">Načítám podrobnosti o pokoji...</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6">
                <div class="card border-0 shadow-sm mx-auto" style="max-width: 800px;">
                    <div class="card-body">
                        <h3 class="card-title text-center mb-4 page-title">Upravit Pokoj</h3>

                        <EditForm Model="room" OnValidSubmit="HandleValidSubmit" FormName="EditRoom">

                            <div class="mb-3">
                                <label for="roomNumber" class="form-label">Číslo Pokoje</label>
                                <input class="form-control" @bind="room.RoomNumber" readonly disabled id="roomNumber" />
                            </div>

                            <div class="mb-3">
                                <label for="roomType" class="form-label">Typ Pokoje</label>
                                <InputSelect class="form-control" @bind-Value="room.RoomTypeId" id="roomType">
                                    @foreach (var type in roomTypes)
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                </InputSelect>

                            </div>


                            <div class="mb-3">
                                <label for="roomStatus" class="form-label">Status</label>
                                <InputSelect class="form-control" @bind-Value="room.RoomStatusId" id="roomStatus">
                                    @foreach (var status in roomStatuses)
                                    {
                                        <option value="@status.Id">@status.Name</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="mb-3">
                                <label for="price" class="form-label">Cena</label>
                                <InputNumber class="form-control" @bind-Value="room.Price" id="price" />
                            </div>

                            <div class="mb-3">
                                <label for="maxAdults" class="form-label">Max Dospělí</label>
                                <InputNumber class="form-control" @bind-Value="room.MaxAdults" id="maxAdults" />
                            </div>

                            <div class="mb-3">
                                <label for="maxChildren" class="form-label">Max Děti</label>
                                <InputNumber class="form-control" @bind-Value="room.MaxChildren" id="maxChildren" />
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Popis</label>
                                <InputTextArea class="form-control" @bind-Value="room.Description" />
                            </div>
                            <div class="text-center mt-4">
                                <button type="submit" class="btn btn-primary">Uložit</button>
                                <a href="/pokoje" class="btn btn-outline-secondary">Zpět na seznam</a>
                                <button type="button" class="btn btn-danger" @onclick="HandleRemoveRoom">Odstranit</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card border-0 shadow-sm mx-auto">
                    <div class="d-flex justify-content-end">
                        <button class="btn btn-primary" @onclick="OpenAddReviewModal">
                            <i class="bi bi-plus"></i> Přidat hodnocení
                        </button>
                    </div>
                    <div class="card-body">
                        <h3 class="card-title">Hodnocení</h3>
                        <div class="table-container">
                            <table class="w-100">
                                <QuickGrid Items="roomReviews.AsQueryable()" Pagination="roomReviewPaggination" Class="w-100">
                                    <TemplateColumn Title="Hodnocení">
                                        @{
                                            int rating = context.Rating; // Získání hodnocení z aktuálního kontextu
                                            string stars = ""; // Inicializace proměnné pro hvězdičky
                                        }

                                        @switch (rating)
                                        {
                                            case 1:
                                                stars = "&#9733;&#9734;&#9734;&#9734;&#9734;"; // 1 plná hvězdička, 4 prázdné
                                                break;
                                            case 2:
                                                stars = "&#9733;&#9733;&#9734;&#9734;&#9734;"; // 2 plné hvězdičky, 3 prázdné
                                                break;
                                            case 3:
                                                stars = "&#9733;&#9733;&#9733;&#9734;&#9734;"; // 3 plné hvězdičky, 2 prázdné
                                                break;
                                            case 4:
                                                stars = "&#9733;&#9733;&#9733;&#9733;&#9734;"; // 4 plné hvězdičky, 1 prázdná
                                                break;
                                            case 5:
                                                stars = "&#9733;&#9733;&#9733;&#9733;&#9733;"; // 5 plných hvězdiček
                                                break;
                                            default:
                                                stars = "&#9734;&#9734;&#9734;&#9734;&#9734;"; // Pokud je rating mimo rozsah, zobrazí se 5 prázdných hvězdiček
                                                break;
                                        }

                                        @* Zobrazíme hvězdičky *@
                                        <span>@(new MarkupString(stars))</span>

                                    </TemplateColumn>
                                    <PropertyColumn Title="Komentář" Property="@(r => r.Comment)" Sortable="true" />
                                    <PropertyColumn Title="Datum" Property="@(r => r.CreatedAt.ToShortDateString())" Sortable="true" />
                                    <TemplateColumn Title="Akce">
                                        <div class="d-inline-flex">
                                            <button class="btn text-danger" @onclick="() => OpenDeleteReviewConfirmation(context.Id)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                            <button class="btn text-primary" @onclick="() => OpenUpdateReviewModal(context.Id)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                        </div>
                                    </TemplateColumn>

                                </QuickGrid>

                                <Paginator State="roomReviewPaggination" />
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
    }
</div>

<ReviewAddModal IsModalFromRoomDetail="true" RoomId="Id" IsVisible="IsAddReviewModalVisible" OnClose="CloseAddReviewModal" Customers="customers"/>
<ReviewEditModal IsModalFromRoomDetail="true" RoomId="Id" IsVisible="IsEditReviewModalVisible" ReviewId="selectedReviewId" OnClose="CloseEditReviewModal" Customers="customers" />
<DeleteModal IsVisible="@isModalVisible" Title="Smazání pokoje" ActionType="DeleteRoom" OnClose="CloseModal" />

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Room room { get; set; } = new Room();

    private List<RoomStatus> roomStatuses = new List<RoomStatus>();
    private List<RoomType> roomTypes = new List<RoomType>();

    private List<Review> roomReviews = new List<Review>();
    private PaginationState roomReviewPaggination = new PaginationState() { ItemsPerPage = 10 };

    private List<Customer> customers = new List<Customer>();
    private bool IsAddReviewModalVisible { get; set; } = false;
    private bool isModalVisible = false;
    private int? reviewIdToDelete;

    private bool IsEditReviewModalVisible = false;
    private int selectedReviewId;



    protected override async Task OnInitializedAsync()
    {

        room = await RoomService.GetRoomByIdAsync(Id);
        roomStatuses = await RoomService.GetRoomStatusesAsync();
        roomTypes = await RoomService.GetRoomTypesAsync();

        roomReviews = await ReviewService.GetRoomReviewsAsync(Id);
        customers = await CustomerService.GetCustomersAsync();

    }

    private void OpenAddReviewModal()
    {
        IsAddReviewModalVisible = true;
    }

    private void OpenUpdateReviewModal(int reviewId)
    {
        selectedReviewId = reviewId;
        IsEditReviewModalVisible = true;
    }

    private void CloseEditReviewModal(bool result)
    {
        IsEditReviewModalVisible = false;
    }

    private void CloseAddReviewModal(bool result)
    {
        IsAddReviewModalVisible = false;
    }

    private async Task HandleValidSubmit()
    {
        await RoomService.UpdateRoomAsync(room);
        NavigationManager.NavigateTo("/pokoje");
    }

    private async Task HandleRemoveRoom()
    {
        await RoomService.DeleteRoomAsync(room.Id);
        NavigationManager.NavigateTo("/pokoje");
    }

    private void OpenDeleteReviewConfirmation(int reviewId)
    {
        isModalVisible = true;
        reviewIdToDelete = reviewId;
    }

    private async Task CloseModal(bool result)
    {
        var review = roomReviews.FirstOrDefault(r => r.Id == reviewIdToDelete);
        isModalVisible = false;

        if (result)
        {
            await ReviewService.DeleteReviewAsync(reviewIdToDelete.Value);
            roomReviews.Remove(review);
        }
    }


}
