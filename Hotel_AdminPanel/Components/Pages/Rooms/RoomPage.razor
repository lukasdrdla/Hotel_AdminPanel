@page "/pokoje"
@inject IRoomService RoomService
@inject IReservationService ReservationService
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))




<div class="container mt-5">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="text-center mb-4 page-title">Pokoje</h3>
            <div class="input-group mb-4">
                <input type="text" class="form-control" placeholder="Hledat..." @oninput="SearchRooms" />
                <button class="btn btn-outline-secondary" type="button">Hledat</button>
            </div>
            <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary" @onclick="NavigateToAddRoom">
                    <i class="bi bi-plus"></i> Přidat pokoj
                </button>
            </div>
            @if (rooms == null || rooms.Count == 0)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <p class="mt-2">Načítám pokoje...</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="w-100">
                        <QuickGrid Items="filteredRooms.AsQueryable()" Pagination="pagginationState" Class="w-100">
                            <PropertyColumn Title="Číslo pokoje" Property="@(r => r.RoomNumber)" Sortable="true" />
                            <PropertyColumn Title="Typ pokoje" Property="@(r => r.RoomType.Name)" Sortable="true" />
                            <PropertyColumn Title="Status" Property="@(r => r.RoomStatus.Name)" Sortable="true" />
                            <PropertyColumn Title="Cena" Property="@(r => r.Price)" Sortable="true" />
                            <PropertyColumn Title="Max Dospělí" Property="@(r => r.MaxAdults)" Sortable="true" />
                            <PropertyColumn Title="Max Děti" Property="@(r => r.MaxChildren)" Sortable="true" />
                            <TemplateColumn Title="Akce">
                                <div class="d-inline-flex">
                                    <button class="btn text-primary" @onclick="() => NavigateToRoomDetail(context.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn text-danger" @onclick="() => OpenDeleteRoomConfirmation(context.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </TemplateColumn>

                        </QuickGrid>
                        <Paginator State="pagginationState" />

                    </table>
                </div>
            }
        </div>
    </div>
</div>

<DeleteModal IsVisible="@isModalVisible" Title="Smazání pokoje" ActionType="DeleteRoom" OnClose="CloseModal" />


@code {
    private PaginationState pagginationState = new PaginationState() { ItemsPerPage = 10 };

    private ICollection<Room> rooms;
    private string searchTerm;
    private List<RoomType> RoomTypes = new List<RoomType>();
    private List<RoomStatus> RoomStatuses = new List<RoomStatus>();
    private ICollection<Room> filteredRooms;
    private bool isAvailable;


    private bool isModalVisible = false;
    private int? deleteRoomId;
    private string Title;
    private string modalMessage;
    private string ActionType;


    private void NavigateToSettingRoomPage()
    {
        NavigationManager.NavigateTo("/nastaveni-pokoju");
    }


    private void OpenDeleteRoomConfirmation(int roomId)
    {
        isModalVisible = true;
        deleteRoomId = roomId;

    }

    private async Task CloseModal(bool result)
    {
        var room = rooms.FirstOrDefault(r => r.Id == deleteRoomId.Value);
        isModalVisible = false;

        if (result)
        {
            await RoomService.DeleteRoomAsync(deleteRoomId.Value);
            rooms.Remove(room);
            filteredRooms = rooms;
        }
    }



    protected override async Task OnInitializedAsync()
    {
        rooms = await RoomService.GetRooomsAsync();
        filteredRooms = rooms;

        RoomTypes = await RoomService.GetRoomTypesAsync();
        RoomStatuses = await RoomService.GetRoomStatusesAsync();




    }



    private void SearchRooms(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRooms = rooms.Where(r => r.RoomNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.Price.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.RoomType.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.RoomStatus.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.MaxAdults.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.MaxChildren.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        else
        {
            filteredRooms = rooms;
        }
    }

    private void FiltreByPriceUp()
    {
        filteredRooms = rooms.OrderBy(r => r.Price).ToList();
    }

    private void FiltreByPriceDown()
    {
        filteredRooms = rooms.OrderByDescending(r => r.Price).ToList();
    }


    private void NavigateToRoomDetail(int id)
    {
        NavigationManager.NavigateTo($"/pokoj/{id}");
    }

    private void NavigateToAddRoom()
    {
        NavigationManager.NavigateTo("/pridat-pokoj");
    }


}