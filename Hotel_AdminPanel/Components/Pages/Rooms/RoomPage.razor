@page "/pokoje"
@inject IRoomService RoomService
@inject IReservationService ReservationService
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))




<div class="container mt-5">
    <h3 class="text-center mb-4 page-title">Pokoje</h3>

    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary me-3" @onclick="NavigateToAddRoom" style="justify-content:flex-end;">Přidat Pokoj</button>
        <button class="btn btn-primary" @onclick="NavigateToSettingRoomPage" style="justify-content:flex-end;"><i class="bi bi-gear"></i></button>
    </div>
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Vyhledat..." @bind="searchTerm" @oninput="SearchRooms">
    </div>
    @if (rooms == null || rooms.Count == 0)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only"></span>
            </div>
            <p class="mt-2">Načítám pokoje...</p>
        </div>
    }
    else
    {
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Číslo Pokoje</th>
                        <th scope="col">Typ Pokoje</th>
                        <th scope="col">Status</th>
                        <th scope="col">Cena</th>
                        <th scope="col">Děti</th>
                        <th scope="col">Dospělí</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var room in filteredRooms)
                    {


                        <tr>
                            @if(editRoomId == room.Id)
                            {
                                <td><input @bind="room.RoomNumber" class="form-control" /></td>
                                <td>
                                    
                                    <InputSelect @bind-Value="room.RoomTypeId" class="form-control">
                                        @foreach (var roomType in RoomTypes)
                                        {
                                            <option value="@roomType.Id">@roomType.Type</option>
                                        }
                                    </InputSelect>
                                </td>
                                <td>

                                    <InputSelect @bind-Value="room.RoomStatusId" class="form-control">
                                        @foreach (var roomStatus in RoomStatuses)
                                        {
                                            <option value="@roomStatus.Id">@roomStatus.Status</option>
                                        }
                                    </InputSelect>
                                    
                                </td>
                                <td><input @bind="room.Price" class="form-control" /></td>
                                <td><input @bind="room.MaxChildren" class="form-control" /></td>
                                <td><input @bind="room.MaxAdults" class="form-control" /></td>
                                <td>
                                    <button class="btn btn-success btn-sm" @onclick="() => SaveRoom(room)">
                                        <i class="bi bi-check"></i>
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="CancelEdit">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </td>
                            }
 
                            else
                            {
                                
                            


                            <td>@room.RoomNumber</td>
                            <td>@room.RoomType.Type</td>
                            <td>@room.RoomStatus.Status</td>
                            <td>@room.Price.ToString("C")</td>
                            <td>@room.MaxChildren</td>
                            <td>@room.MaxAdults</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => EditRoom(room.Id)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteRoom(room.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>

                                <button class="btn btn-success btn-sm" @onclick="() => NavigateToRoomDetail(room.Id)">
                                    <i class="bi bi-eye"></i>
                                </button>
                                    



                            </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>



@code {

    private ICollection<Room> rooms;
    private string searchTerm;
    private List<RoomType> RoomTypes = new List<RoomType>();
    private List<RoomStatus> RoomStatuses = new List<RoomStatus>();
    private ICollection<Room> filteredRooms;
    private bool isAvailable;


    private int? editRoomId;


    private void EditRoom(int id)
    {
        editRoomId = id;
    }

    private void CancelEdit()
    {
        editRoomId = null;
    }

    private async Task SaveRoom(Room room)
    {
        await RoomService.UpdateRoomAsync(room);
        editRoomId = null;
    }

    private void NavigateToSettingRoomPage()
    {
        NavigationManager.NavigateTo("/nastaveni-pokoju");
    }


    private async Task DeleteRoom(int id)
    {
        var room = rooms.FirstOrDefault(r => r.Id == id);
        if (room != null)
        {
            var confirmResult = await jsRuntime.InvokeAsync<bool>("confirm", "Opravdu chcete smazat tento pokoj?");
            if (confirmResult)
            {
                await RoomService.DeleteRoomAsync(id);
                rooms.Remove(room);
                filteredRooms = rooms;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        rooms = await RoomService.GetRooomsAsync();
        filteredRooms = rooms;

        RoomTypes = await RoomService.GetRoomTypesAsync();
        RoomStatuses = await RoomService.GetRoomStatusesAsync();


    }

    private void SearchRooms(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRooms = rooms.Where(r => r.RoomNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.Price.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.RoomType.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.RoomStatus.Status.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.MaxAdults.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                || r.MaxChildren.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        else
        {
            filteredRooms = rooms;
        }
    }

    private void FiltreByPriceUp()
    {
        filteredRooms = rooms.OrderBy(r => r.Price).ToList();
    }

    private void FiltreByPriceDown()
    {
        filteredRooms = rooms.OrderByDescending(r => r.Price).ToList();
    }


    private void NavigateToRoomDetail(int id)
    {
        NavigationManager.NavigateTo($"/pokoj/{id}");
    }

    private void NavigateToAddRoom()
    {
        NavigationManager.NavigateTo("/pridat-pokoj");
    }


}