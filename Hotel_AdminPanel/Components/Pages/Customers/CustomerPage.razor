@page "/zakaznici"
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="container mt-5">
    <div class="row">
        <div class="col-md-12 d-flex flex-fill">
            <div class="card border-0 shadow-sm mx-auto flex-fill">
                <div class="card-body">
                    <h3 class="text-center mb-4 page-title">Zakazníci</h3>
            <div class="input-group mb-4">
                <input type="text" class="form-control" placeholder="Hledat..." @oninput="SearchCustomers" />
                <button class="btn btn-outline-secondary" type="button">Hledat</button>
            </div>
    <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary" @onclick="NavigateToAddCustomer">
            <i class="bi bi-plus"></i> Přidat zákazníka
        </button>
    </div>

    @if (customers == null || customers.Count == 0)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only"></span>
            </div>
            <p class="mt-2">Načítám zákazníky...</p>
        </div>
    }
    else
    {

                <div class="table-responsive">
                    <table class="w-100">
                        <QuickGrid Items="filteredCustomers.AsQueryable()" Pagination="paginationState" Class=" w-100">
                            <PropertyColumn Title="Jméno" Property="@(x => x.FirstName)" Sortable="true" />
                            <PropertyColumn Title="Příjmení" Property="@(x => x.LastName)" Sortable="true" />
                            <PropertyColumn Title="Číslo Dokladu" Property="@(x => x.DocumentNumber)" Sortable="true" />
                            <PropertyColumn Title="Email" Property="@(x => x.Email)" Sortable="true" />
                            <PropertyColumn Title="Telefon" Property="@(x => x.Phone)" Sortable="true" />
                            <PropertyColumn Title="Adresa" Property="@(x => x.Address)" Sortable="true" />
                            <PropertyColumn Title="Město" Property="@(x => x.City)" Sortable="true" />
                            <TemplateColumn Title="Akce">
                                <div class="d-inline-flex">
                                    <button class="btn text-primary" @onclick="() => NavigateToCustomerDetail(context.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn text-danger" @onclick="() => OpenDeleteConfirmation(context.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>

                                </div>
                            </TemplateColumn>
                        </QuickGrid>
                    </table>
            


        

        <Paginator State="paginationState" />
                </div>
    }
        </div>

    </div>
</div>
</div>
</div>

<DeleteModal Title="Smazaní zákazníka" ActionType="DeleteCustomer" IsVisible="@isModalVisible" OnClose="HandleModalClose" />

@code {
    private List<Customer> customers;
    private List<Customer> filteredCustomers;
    private bool isModalVisible = false;
    private int customerIdToDelete;

    private string searchTerm = string.Empty;
    private PaginationState paginationState = new PaginationState { ItemsPerPage = 20 };

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomersAsync();
        filteredCustomers = customers;
    }



    private void NavigateToAddCustomer()
    {
        NavigationManager.NavigateTo("/pridat-zakaznika");
    }

    private void SearchCustomers(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        FilterCustomers();
    }

    private void FilterCustomers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCustomers = customers;
        }
        else
        {
            filteredCustomers = customers.Where(x => x.FirstName.ToLower().Contains(searchTerm.ToLower())
            || x.LastName.ToLower().Contains(searchTerm.ToLower())
            || x.DocumentNumber.ToLower().Contains(searchTerm.ToLower())
            || x.Email.ToLower().Contains(searchTerm.ToLower())
            || x.Phone.ToLower().Contains(searchTerm.ToLower())
            || x.Address.ToLower().Contains(searchTerm.ToLower())
            || x.City.ToLower().Contains(searchTerm.ToLower())
            ).ToList();
        }
    }

    private void OpenDeleteConfirmation(int customerId)
    {
        customerIdToDelete = customerId;
        isModalVisible = true;
    }

    private async Task HandleModalClose(bool result)
    {
        var customer = customers.FirstOrDefault(r => r.Id == customerIdToDelete);
        isModalVisible = false;

        if (result)
        {
            await CustomerService.DeleteCustomerAsync(customerIdToDelete);
            customers.Remove(customer);
            filteredCustomers = customers;
        }
    }

    private async Task DeleteCustomer(int customerId)
    {
        await CustomerService.DeleteCustomerAsync(customerId);
        customers = await CustomerService.GetCustomersAsync();
        FilterCustomers();
    }

    private void NavigateToCustomerDetail(int id)
    {
        NavigationManager.NavigateTo($"/zakaznik/{id}");
    }
}
