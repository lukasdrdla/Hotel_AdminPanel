@page "/zakaznici"
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [Authorize]

<div class="container mt-5">
    <h3 class="text-center mb-4 page-title">Zákazníci</h3>
    <div class="d-flex justify-content-between mb-3">
        <div></div> <!-- Placeholder for alignment -->
        <button class="btn btn-primary" @onclick="ShowAddCustomerModal">Přidat Zákazníka</button>
    </div>

    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Vyhledat..." @bind="searchTerm" @oninput="SearchCustomers">
    </div>

    @if (customers == null || customers.Count == 0)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only"></span>
            </div>
            <p class="mt-2">Načítám zákazníky...</p>
        </div>
    }
    else
    {
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Jméno</th>
                        <th scope="col">Přijmení</th>
                        <th scope="col">Email</th>
                        <th scope="col">Telefon</th>
                        <th scope="col">Adresa</th>
                        <th scope="col">Město</th>
                        <th scope="col">PSČ</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in filteredCustomers)
                    {
                        <tr>
                            @if (editCustomerId == customer.Id)
                            {
                                <!-- Inputy pro úpravu zákazníka -->
                                <td><input @bind="customer.FirstName" class="form-control" /></td>
                                <td><input @bind="customer.LastName" class="form-control" /></td>
                                <td><input @bind="customer.Email" class="form-control" /></td>
                                <td><input @bind="customer.Phone" class="form-control" /></td>
                                <td><input @bind="customer.Address" class="form-control" /></td>
                                <td><input @bind="customer.City" class="form-control" /></td>
                                <td><input @bind="customer.PostalCode" class="form-control" /></td>
                                <td>
                                    <button class="btn btn-success btn-sm" @onclick="() => SaveCustomer(customer)">
                                        <i class="bi bi-check"></i>
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="CancelEdit">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </td>
                            }
                            else
                            {
                                <!-- Zobrazení zákazníka -->
                                <td>@customer.FirstName</td>
                                <td>@customer.LastName</td>
                                <td>@customer.Email</td>
                                <td>@customer.Phone</td>
                                <td>@customer.Address</td>
                                <td>@customer.City</td>
                                <td>@customer.PostalCode</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" @onclick="() => EditCustomer(customer.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>

                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteCustomer(customer.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>

                                    <button class="btn btn-success btn-sm" @onclick="() => NavigateToCustomerDetail(customer.Id)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </td>

                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<AddCustomerModal OnCustomerAdded="AddCustomer" isVisible="isAddCustomerModalVisible" OnClose="() => isAddCustomerModalVisible = false" />


@code {
    private List<Customer> customers;
    private string searchTerm;
    private List<Customer> filteredCustomers;

    private int? editCustomerId = null;
    private bool isAddCustomerModalVisible = false;
    private Customer newCustomer = new Customer();

    private void ShowAddCustomerModal()
    {
        isAddCustomerModalVisible = true;
        newCustomer = new Customer(); // Reset new customer
    }

    private void CloseAddCustomerModal()
    {
        isAddCustomerModalVisible = false;
    }

    private async Task AddCustomer()
    {
        await CustomerService.CreateCustomerAsync(newCustomer);
        customers = await CustomerService.GetCustomersAsync();
        filteredCustomers = customers;
        CloseAddCustomerModal();
    }

    private void EditCustomer(int id)
    {
        editCustomerId = id;
    }

    private void CancelEdit()
    {
        editCustomerId = null;
    }

    private async Task SaveCustomer(Customer customer)
    {
        await CustomerService.UpdateCustomerAsync(customer);
        editCustomerId = null;
    }

    private async Task DeleteCustomer(int id)
    {
        var customer = customers.FirstOrDefault(c => c.Id == id);

        if (customer != null)
        {
            var result = await JSRuntime.InvokeAsync<bool>("confirm", $"Opravdu chcete smazat zákazníka {customer.FirstName} {customer.LastName}?");

            if (result == true)
            {
                await CustomerService.DeleteCustomerAsync(id);
                customers = await CustomerService.GetCustomersAsync();
                filteredCustomers = customers;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomersAsync();
        filteredCustomers = customers;
    }

    private void SearchCustomers(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCustomers = customers
                .Where(c => c.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            c.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            c.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            c.Phone.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            filteredCustomers = customers;
        }
    }

    private void NavigateToCustomerDetail(int id)
    {
        NavigationManager.NavigateTo($"/zakaznik/{id}");
    }
}
