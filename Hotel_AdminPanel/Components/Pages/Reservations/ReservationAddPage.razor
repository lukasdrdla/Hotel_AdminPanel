@page "/pridat-rezervaci"
@using Hotel_AdminPanel.Components.Pages.DatePicker
@inject IReservationService ReservationService
@inject NavigationManager NavigationManager
@inject IRoomService RoomService
@inject ICustomerService CustomerService
@inject IJSRuntime JSRuntime


@rendermode InteractiveServer

<div class="container mt-2">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="card-title text-center mb-4 page-title">Přidat Rezervaci</h3>
            <EditForm Model="reservation" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <div class="form-group mb-3">
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-primary" @onclick="OpenAddCustomerModal">Přidat zákazníka</button>
                        </div>

                        <label for="CustomerId" class="form-label">Zákazník</label>
                        <div class="form-group position-relative">

                            <input type="text" class="form-control" placeholder="Hledat zákazníka" @bind="searchTerm" @bind:event="oninput" @bind:after="FilterCustomers" @onblur="HideCustomerList" />
                            @if (filteredCustomers.Any())
                            {
                                <ul class="list-group mt-1" style="max-height: 200px; overflow-y: auto; position: absolute; top: 100%; left: 0; right: 0; z-index: 1000;">
                                    @foreach (var customer in filteredCustomers)
                                    {
                                        <li class="list-group-item list-group-item-action" @onmousedown="() => SelectCustomer(customer)">
                                            <div>
                                                <strong> Jméno:</strong> @customer.FirstName @customer.LastName
                                            </div>
                                            <div>
                                                <strong> Kontaktní údaje:</strong> @customer.Email, @customer.Phone
                                            </div>
                                            <div>
                                                <strong> Adresa:</strong> @customer.Address, @customer.City, @customer.PostalCode, @customer.Country
                                            </div>
                                            <div>
                                                <strong> Číslo dokladu:</strong> @customer.DocumentNumber
                                            </div>


                                        </li>
                                    }
                                </ul>
                            }
                       </div>
                    </div> 
                </div>


                <!-- Hosté -->
                <div class="d-flex justify-content-between">
                    <label for="Guests" class="form-label">Hosté</label>
                    <button type="button" class="btn btn-primary mb-3" @onclick="AddGuest">Přidat hosta</button>
                </div>
                <div class="form-group mb-3">
                    @foreach (var guest in reservation.Guests)
                    {
                        <div class="d-flex mb-2">
                            <input type="text" class="form-control me-2" placeholder="Jméno hosta" @bind="guest.FirstName" />
                            <input type="text" class="form-control me-2" placeholder="Příjmení hosta" @bind="guest.LastName" />
                            <input type="date" class="form-control me-2" placeholder="Datum narození hosta" @bind="guest.DateOfBirth" />
                            <input type="number" class="form-control" placeholder="Rodné číslo hosta" @bind="guest.DocumentNumber" />

                            <button type="button" class="btn btn-danger ms-2" @onclick="() => reservation.Guests.Remove(guest)">
                                <i class="bi bi-trash"></i>
                            </button>

                        </div>
                    }
                </div>


                <div class="form-group mb-3">
                    <label for="RoomId" class="form-label">Pokoj</label>
                    <select id="RoomId" class="form-control" @onchange="@(e => OnRoomSelected(e))">
                        <option value="">Vyber pokoj</option>
                        @foreach (var room in rooms)
                        {
                            <option value="@room.Id">@room.RoomNumber - @room.RoomType.Name</option>
                        }
                    </select>
                   
                </div>

                <div class="mb-4 row">
                    <div class="col-md-6">
                        <label for="CheckIn" class="form-label">Check In</label>
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Vyberte datum"
                                   value="@reservation.CheckIn.ToShortDateString()" />
                            <button type="button" class="btn btn-secondary" @onclick="OpenCheckInCalendar">
                                <i class="bi bi-calendar-date"></i>
                            </button>
                        </div>
                        @if (isCheckInCalendarVisible)
                        {
                            <div class="calendar-container">
                                <CustomDatePicker DisableDates="unavailableDates" OnDateSelected="OnDateSelectIn" />
                            </div>
                        }
                    </div>

                    <div class="col-md-6">
                        <label for="CheckOut" class="form-label">Check Out</label>
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Vyberte datum"
                                   value="@reservation.CheckOut.ToShortDateString()" readonly />
                            <button type="button" class="btn btn-secondary" @onclick="OpenCheckOutCalendar">
                                <i class="bi bi-calendar-date"></i>
                            </button>
                        </div>
                        @if (isCheckOutCalendarVisible)
                        {
                            <div class="calendar-container">
                                <CustomDatePicker DisableDates="unavailableDates" OnDateSelected="OnDateSelectOut" />
                            </div>
                        }
                    </div>
                </div>


                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="Adults" class="form-label">Dospělí</label>
                        <select id="Adults" class="form-control" @onchange="OnAdultsSelect">
                            @for (int i = 0; i <= selectedRoom?.MaxAdults; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-6">
                        <label for="Children" class="form-label">Děti</label>
                        <select id="Children" class="form-control" @onchange="OnChildrenSelect">
                            @for (int i = 0; i <= selectedRoom?.MaxChildren; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-group mb-3">
                    <label for="Total" class="form-label">Cena</label>
                    <InputNumber id="Total" class="form-control" @bind-Value="reservation.TotalPrice" />
                </div>


             
                <div class="mb-3 row">
                    <div class="col-md-6">
                
                        <label for="MealPlanId" class="form-label">Stravování</label>
                        <select id="MealPlanId" class="form-control" @onchange="OnMealSelect">
                            <option value="">Vyber stravování</option>
                            @foreach (var mealPlan in mealPlans)
                            {
                                <option value="@mealPlan.Id">@mealPlan.Name</option>

                            
                            }
                        </select>
                    </div>

                    <div class="col-md-6">
                        <label for="ReservationStatusId" class="form-label">Status</label>
                        <InputSelect id="ReservationStatusId" class="form-control" @bind-Value="reservation.ReservationStatusId">
                            <option value="">Vyber status</option>
                            @foreach (var reservationStatus in reservationStatuses)
                            {
                                <option value="@reservationStatus.Id">@reservationStatus.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="form-group mb-3">
                    <label for="SpecialRequest" class="form-label">Speciální Požadavky</label>
                    <InputTextArea id="SpecialRequest" class="form-control" @bind-Value="reservation.SpecialRequest" />
                </div>

                <div class="form-group mb-3">
                    <label for="adminNote" class="form-label">Poznámka Zaměstnance</label>
                    <InputTextArea id="adminNote" class="form-control" @bind-Value="reservation.AdminNote" />
                </div>


                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary">Přidat</button>
                    <a href="/rezervace" class="btn btn-outline-secondary ml-2">Zpět na seznam</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<CustomerAddModal IsVisible="isAddCustomerModalVisible" OnClose="HandleCustomerModalClose" />



<style>
    .calendar-container {
        position: relative;
        margin-top: 10px;
        transition: all 0.3s ease;
    }

    .input-group {
        display: flex;
        align-items: center;
    }

    .form-control {
        border-radius: 5px 0 0 5px;
        border: 1px solid #ccc;
        transition: border-color 0.2s;
    }

        .form-control:focus {
            border-color: #14A872; /* Barva na fokus */
            box-shadow: 0 0 5px rgba(20, 168, 114, 0.5);
        }

    .btn-secondary {
        border-radius: 0 5px 5px 0;
    }
</style>



@code {
    private Reservation reservation = new Reservation();
    private List<Customer> customers = new List<Customer>();
    private List<Customer> filteredCustomers = new List<Customer>();
    private string? searchTerm;
    private ICollection<Room> rooms = new List<Room>();
    private Room selectedRoom;
    private List<MealPlan> mealPlans = new List<MealPlan>();
    private List<ReservationStatus> reservationStatuses = new List<ReservationStatus>();
    int numberOfNights;

    private bool isAddCustomerModalVisible = false;
    private Customer newCustomerModel = new Customer();

    private List<DateTime> unavailableDates = new List<DateTime>();

    private bool isCheckInCalendarVisible = false;
    private bool isCheckOutCalendarVisible = false;


    private void OpenCheckInCalendar()
    {
        isCheckInCalendarVisible = !isCheckInCalendarVisible;
    }

    private void OpenCheckOutCalendar()
    {
        isCheckOutCalendarVisible = !isCheckOutCalendarVisible;
    }


    protected override async Task OnInitializedAsync()
    {
        reservation.CheckIn = DateTime.Now;
        reservation.CheckOut = DateTime.Now.AddDays(1);
        customers = await CustomerService.GetCustomersAsync();
        filteredCustomers = new List<Customer>();
        rooms = await RoomService.GetRooomsAsync();

        mealPlans = await ReservationService.GetMealPlansAsync();
        reservationStatuses = await ReservationService.GetReservationStatusesAsync();


    }



    private void SelectCustomer(Customer customer)
    {
        reservation.CustomerId = customer.Id;
        searchTerm = $"{customer.FirstName} {customer.LastName}";
        filteredCustomers = new List<Customer>();
    }

    private void CalculateTotalPrice()
    {
        if (selectedRoom == null || reservation.CheckIn >= reservation.CheckOut)
        {
            reservation.TotalPrice = 0;
            return;
        }

        numberOfNights = (int)(reservation.CheckOut - reservation.CheckIn).TotalDays;
        reservation.TotalPrice = selectedRoom.Price * numberOfNights;

        if (reservation.MealPlan != null)
        {
            reservation.TotalPrice +=
                (reservation.MealPlan.Price * reservation.Adults) +
                ((reservation.MealPlan.Price / 2) * reservation.Children);
        }

    }

    private void OnAdultsSelect(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int adults))
        {
            reservation.Adults = adults;
        }
        CalculateTotalPrice();
    }

    private void OnChildrenSelect(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int children))
        {
            reservation.Children = children;
        }
        CalculateTotalPrice();
    }

    private void OnMealSelect(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedMealPlanId))
        {
            reservation.MealPlanId = selectedMealPlanId;

            reservation.MealPlan = mealPlans.FirstOrDefault(mp => mp.Id == selectedMealPlanId);

        }
        CalculateTotalPrice();
    }

    private void OnDateSelectIn(DateTime? date)
    {
        reservation.CheckIn = date.Value;
        isCheckInCalendarVisible = false;
    }

    private void OnDateSelectOut(DateTime? date)
    {
        reservation.CheckOut = date.Value;
        isCheckOutCalendarVisible = false;
    }



    private async void OnRoomSelected(ChangeEventArgs e)
    {
        isCheckInCalendarVisible = false;
        reservation.RoomId = int.Parse(e.Value.ToString());
        var selectedValue = e.Value?.ToString();

        if (string.IsNullOrWhiteSpace(selectedValue))
        { 
            reservation.Adults = 0;
            reservation.Children = 0;
            reservation.TotalPrice = 0;
            reservation.MealPlanId = 0;
            return;
        }
        var roomId = int.Parse(e.Value.ToString());
        selectedRoom = rooms.FirstOrDefault(room => room.Id == roomId);
        unavailableDates = await ReservationService.GetOccupiedDatesForRoomAsync(roomId);
        
        
        CalculateTotalPrice();
    }


    private async Task HandleValidSubmit()
    {

        var isRoomAvailable = await ReservationService.IsRoomAvailableAsync(reservation.RoomId, reservation.CheckIn, reservation.CheckOut);
        if (!isRoomAvailable)
        {
            // Zde můžeme zobrazit chybovou zprávu
            await JSRuntime.InvokeVoidAsync("alert", "Pokoj je již rezervovaný v tomto období.");
            return; // Zastavíme proces vytváření rezervace
        }
        await ReservationService.CreateReservationAsync(reservation);

        await RoomService.UpdateRoomStatusAsync(reservation.RoomId, 2);

        NavigationManager.NavigateTo("/rezervace");
    }

    private void OpenAddCustomerModal()
    {
        isAddCustomerModalVisible = true;
    }

    private void HandleCustomerModalClose()
    {
        isAddCustomerModalVisible = false;
    }

    private async void HandleAddCustomer()
    {
        await CustomerService.CreateCustomerAsync(newCustomerModel);
        isAddCustomerModalVisible = false;
    }

    private void AddGuest()
    {
        reservation.Guests.Add(new Guest());
    }

    private void FilterCustomers()
    {
        filteredCustomers = customers.Where(x => x.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || x.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }



    private void HideCustomerList()
    {
        filteredCustomers.Clear();
    }
}
