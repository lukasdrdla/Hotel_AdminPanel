@page "/reservation/add"
@inject IReservationService ReservationService
@inject NavigationManager NavigationManager
@inject IRoomService RoomService
@inject ICustomerService CustomerService
@inject IReservationService ReservationService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container mt-2">
    <div class="card border-0 shadow-sm mx-auto" style="max-width: 800px;">
        <div class="card-body">
            <h3 class="card-title text-center mb-4 page-title">Přidat Rezervaci</h3>
            <EditForm Model="reservation" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label for="CustomerId" class="form-label">Zákazník</label>
                    <InputSelect id="CustomerId" class="form-control" @bind-Value="reservation.CustomerId">
                        <option value="">Vyber zákazníka</option>
                        @foreach (var customer in customers)
                        {
                            <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
                        }
                    </InputSelect>

                </div>

                <div class="form-group mb-3">
                    <label for="RoomId" class="form-label">Pokoj</label>
                    <select id="RoomId" class="form-control" @onchange="OnRoomSelected" >
                        <option value="">Vyber pokoj</option>
                        @foreach (var room in rooms)
                        {
                            <option value="@room.Id">@room.RoomNumber - @room.RoomType.Type</option>
                        }
                    </select>
                   
                </div>

                <div class="form-group mb-3">
                    <label for="CheckIn" class="form-label">Check In</label>
                    <input type="date" id="CheckIn" class="form-control" @onchange="OnDateSelectIn" />
                </div>

                <div class="form-group mb-3">
                    <label for="CheckOut" class="form-label">Check Out</label>
                    <input type="date" id="CheckOut" class="form-control" @onchange="OnDateSelectOut" />
                </div>

                <div class="form-group mb-3">
                    <label for="Adults" class="form-label">Dospělí</label>
                    <select id="Adults" class="form-control" @onchange="OnAdultsSelect">
                        @for (int i = 0; i <= selectedRoom?.MaxAdults; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>

                <div class="form-group mb-3">
                    <label for="Children" class="form-label">Děti</label>
                    <select id="Children" class="form-control" @onchange="OnChildrenSelect">
                        @for (int i = 0; i <= selectedRoom?.MaxChildren; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>

                <div class="form-group mb-3">
                    <label for="Total" class="form-label">Cena</label>
                    <InputNumber id="Total" class="form-control" @bind-Value="reservation.TotalPrice" />
                </div>

             

                <div class="form-group mb-3">
                    <label for="MealPlanId" class="form-label">Stravování</label>
                    <select id="MealPlanId" class="form-control" @onchange="OnMealSelect">
                        @foreach (var mealPlan in mealPlans)
                        {
                            <option value="@mealPlan.Id">@mealPlan.Plan</option>

                            
                        }
                    </select>
                </div>

                <div class="form-group mb-3">
                    <label for="ReservationStatusId" class="form-label">Status</label>
                    <InputSelect id="ReservationStatusId" class="form-control" @bind-Value="reservation.ReservationStatusId">
                        @foreach (var reservationStatus in reservationStatuses)
                        {
                            <option value="@reservationStatus.Id">@reservationStatus.RStatus</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group mb-3">
                    <label for="SpecialRequest" class="form-label">Speciální Požadavky</label>
                    <InputTextArea id="SpecialRequest" class="form-control" @bind-Value="reservation.SpecialRequest" />
                </div>


                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary">Přidat</button>
                    <a href="/rezervace" class="btn btn-outline-secondary ml-2">Zpět na seznam</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>





@code {
    private Reservation reservation = new Reservation();
    private List<Customer> customers = new List<Customer>();
    private ICollection<Room> rooms = new List<Room>();
    private Room selectedRoom;
    private List<MealPlan> mealPlans = new List<MealPlan>();
    private List<ReservationStatus> reservationStatuses = new List<ReservationStatus>();
    int numberOfNights;


    protected override async Task OnInitializedAsync()
    {
        reservation.CheckIn = DateTime.Now;
        reservation.CheckOut = DateTime.Now.AddDays(1);
        customers = await CustomerService.GetCustomersAsync();
        rooms = await RoomService.GetRooomsAsync();

        mealPlans = await ReservationService.GetMealPlansAsync();
        reservationStatuses = await ReservationService.GetReservationStatusesAsync();

    }

    private void CalculateTotalPrice()
    {
        if (selectedRoom != null)
        {
            numberOfNights = (int)(reservation.CheckOut - reservation.CheckIn).TotalDays;
            reservation.TotalPrice = selectedRoom.Price * numberOfNights;

            if (reservation.MealPlan != null)
            {
                reservation.TotalPrice += (reservation.MealPlan.Price * reservation.Adults) + ((reservation.MealPlan.Price / 2) * reservation.Children);
            }
        }
    }

    private void OnAdultsSelect(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int adults))
        {
            reservation.Adults = adults;
        }
        CalculateTotalPrice();
    }

    private void OnChildrenSelect(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int children))
        {
            reservation.Children = children;
        }
        CalculateTotalPrice();
    }

    private void OnMealSelect(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int selectedMealPlanId))
        {
            reservation.MealPlanId = selectedMealPlanId;

            reservation.MealPlan = mealPlans.FirstOrDefault(mp => mp.Id == selectedMealPlanId);

        }
        CalculateTotalPrice();
    }

    private void OnDateSelectIn(ChangeEventArgs e)
    {
        reservation.CheckIn = DateTime.Parse(e.Value.ToString());

        CalculateTotalPrice();
    }

    private void OnDateSelectOut(ChangeEventArgs e)
    {
        reservation.CheckOut = DateTime.Parse(e.Value.ToString());
        CalculateTotalPrice();
    }



    private async void OnRoomSelected(ChangeEventArgs e)
    {
        reservation.RoomId = int.Parse(e.Value.ToString());
        var selectedValue = e.Value?.ToString();

        if (string.IsNullOrWhiteSpace(selectedValue))
        { 
            reservation.Adults = 0;
            reservation.Children = 0;
            reservation.TotalPrice = 0;
            reservation.MealPlanId = 0;
            return;
        }


        var roomId = int.Parse(e.Value.ToString());
        selectedRoom = rooms.FirstOrDefault(room => room.Id == roomId);



        CalculateTotalPrice();
    }

    private async Task HandleValidSubmit()
    {

        var isRoomAvailable = await ReservationService.IsRoomAvailableAsync(reservation.RoomId, reservation.CheckIn, reservation.CheckOut);
        if (!isRoomAvailable)
        {
            // Zde můžeme zobrazit chybovou zprávu
            await JSRuntime.InvokeVoidAsync("alert", "Pokoj je již rezervovaný v tomto období.");
            return; // Zastavíme proces vytváření rezervace
        }
        await ReservationService.CreateReservationAsync(reservation);

        await RoomService.UpdateRoomStatusAsync(reservation.RoomId, 2);

        NavigationManager.NavigateTo("/rezervace");
    }
}
