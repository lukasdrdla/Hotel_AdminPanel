@page "/rezervace"
@using Hotel_AdminPanel.Components.Pages.Settings
@inject IReservationService ReservationService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender:false))


<div class="container mt-5">
    <div class="card border-0 shadow-sm mx-auto">
        <div class="card-body">
            <h3 class="text-center mb-4 page-title">Rezervace</h3>
            <div class="input-group mb-4">
                <input type="text" class="form-control" placeholder="Hledat..." @oninput="SearchReservations" />
                <button class="btn btn-outline-secondary" type="button">Hledat</button>
            </div>
            <div class="d-flex justify-content-between mb-3">
                <div></div> <!-- Placeholder for alignment -->
                <button class="btn btn-primary" @onclick="NavigateToAddReservation">
                    <i class="bi bi-plus"></i> Přidat rezervaci
                </button>
            </div>

            <div class="table-responsive">
                <table class="w-100">
                    <QuickGrid Items="filteredReservations.AsQueryable()" Pagination="paginationState" Class=" w-100">
                        <PropertyColumn Title="Zákazník" Property="@(x => x.Customer.FirstName + " " + x.Customer.LastName)" Sortable="true" />
                        <PropertyColumn Title="CheckIn" Property="@(x => x.CheckIn.ToShortDateString())" Sortable="true" />
                        <PropertyColumn Title="CheckOut" Property="@(x => x.CheckOut.ToShortDateString())" Sortable="true" />
                        <PropertyColumn Title="Pokoj" Property="@(x => x.Room.RoomNumber)" Sortable="true" />
                        <PropertyColumn Title="Cena" Property="@(x => x.TotalPrice)" Sortable="true" />
                        <PropertyColumn Title="Dospělí" Property="@(x => x.Adults)" Sortable="true" />
                        <PropertyColumn Title="Děti" Property="@(x => x.Children)" Sortable="true" />
                        <PropertyColumn Title="Stravování" Property="@(x => x.MealPlan.Name)" Sortable="true" />

                        <TemplateColumn Title="Akce">
                            <div class="d-inline-flex">
                                <button class="btn text-primary" @onclick="() => NavigateToReservationDetail(context.Id)">
                                    <i class="bi bi-pencil"></i>
                                </button>

                                <button class="btn text-danger" @onclick="() => OpenDeleteConfirmation(context.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </TemplateColumn>

                    </QuickGrid>
                    <Paginator State="paginationState" />
                </table>
            </div>
        </div>
    </div>
</div>

<Modal Title="Potvrzení smazání" Message="Opravdu chcete smazat tuhle rezervaci?" IsVisible="@isDeleteModalVisible" OnClose="HandleModalClose"/>



@code {

    private List<Reservation> reservations ;
    private List<Reservation> filteredReservations = new List<Reservation>();
    private string? searchTerm;

    private Reservation reservation = new Reservation();
    private bool isReservationModalVisible = false;



    private int reservationIdToDelete;
    private bool isDeleteModalVisible = false;

    private PaginationState paginationState = new PaginationState(){ItemsPerPage = 20};

    private async Task OpenDeleteConfirmation(int reservationId)
    {
        reservationIdToDelete = reservationId;
        isDeleteModalVisible = true;
    }


    private void OpenAddReservationModal()
    {
        isReservationModalVisible = true;
    }

    private async Task HandleModalClose(bool result)
    {
        isDeleteModalVisible = false;

        if (result)
        {
            await ReservationService.DeleteReservationAsync(reservationIdToDelete);
            reservations = await ReservationService.GetReservationsAsync();
            filteredReservations = reservations;
        }
    }

    private void SearchReservations(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredReservations = reservations.Where(r => r.Room.RoomNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.Customer.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.Customer.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.CheckIn.ToString("dd/MM/yyyy").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.CheckOut.ToString("dd/MM/yyyy").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.TotalPrice.ToString("C").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.ReservationStatus.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.Adults.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.Children.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.MealPlan.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.SpecialRequest.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            filteredReservations = reservations;
        }
        


    }

    protected override async Task OnInitializedAsync()
    {
        reservations = await ReservationService.GetReservationsAsync();
        filteredReservations = reservations;
    }


    private void NavigateToReservationDetail(int id)
    {
        NavigationManager.NavigateTo($"/rezervace/{id}");
    }

    private void NavigateToAddReservation()
    {
        NavigationManager.NavigateTo("/pridat-rezervaci");
    }


    private string GetReservationStatus(string status)
    {
        return status switch
        {
            "Čekající" => "text-warning",
            "Potvrzená" => "text-primary",
            "Dokončená" => "text-success",
            "Zrušená" => "text-danger",
            "Odmítnutá" => "text-danger",
            _ => "badge badge-info"
        };
    }

}
