@page "/reservations"
@inject IReservationService ReservationService
@inject NavigationManager NavigationManager

@rendermode @(new InteractiveServerRenderMode(prerender:false))


<div class="container mt-5">
    <h3 class="text-center mb-4">Rezervace</h3>
    <div class="d-flex justify-content-between mb-3">
        <div></div> <!-- Placeholder for alignment -->
                <button class="btn btn-primary" @onclick="NavigateToAddReservation">Přidat Rezervaci</button>
    </div>

    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Vyhledat..." @bind="searchTerm" @oninput="SearchReservations" />
    </div>

    @if (reservations == null || reservations.Count == 0)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only"></span>
            </div>
            <p class="mt-2">Loading reservations...</p>
        </div>
    }
    else
    {
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Pokoj</th>
                        <th>Zákazník</th>
                        <th>Check In</th>
                        <th>Check Out</th>
                        <th>Cena</th>
                        <th>Status</th>
                        <th>Dospělí</th>
                        <th>Děti</th>
                        <th>Stravování</th>
                        <th>Speciální Požadavky</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var reservation in filteredReservations)
                    {
                        <tr @onclick="() => NavigateToRoomDetail(reservation.Id)" style="cursor:pointer;">

                            <td>@reservation.Room.RoomNumber</td>
                            <td>@reservation.Customer.FirstName @reservation.Customer.LastName</td>
                            <td>@reservation.CheckIn.ToString("dd/MM/yyyy")</td>
                            <td>@reservation.CheckOut.ToString("dd/MM/yyyy")</td>
                            <td>@reservation.TotalPrice.ToString("C")</td>

                            <td><span class="@GetReservationStatus(reservation.ReservationStatus.RStatus)">@reservation.ReservationStatus.RStatus</span></td>

                            <td>@reservation.Adults</td>
                            <td>@reservation.Children</td>
                            <td>@reservation.MealPlan.Plan</td>
                            <td>@reservation.SpecialRequest</td>

                        </tr>

                    }

                </tbody>
            </table>
        </div>
    }
</div>

@code {

    private List<Reservation> reservations ;
    private List<Reservation> filteredReservations;
    private string? searchTerm;


    private void SearchReservations(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredReservations = reservations.Where(r => r.Room.RoomNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.Customer.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.Customer.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.CheckIn.ToString("dd/MM/yyyy").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.CheckOut.ToString("dd/MM/yyyy").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.TotalPrice.ToString("C").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.ReservationStatus.RStatus.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.Adults.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.Children.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.MealPlan.Plan.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            r.SpecialRequest.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            filteredReservations = reservations;
        }
        


    }

    protected override async Task OnInitializedAsync()
    {
        reservations = await ReservationService.GetReservationsAsync();
        filteredReservations = reservations;
    }

    private void NavigateToRoomDetail(int id)
    {
        NavigationManager.NavigateTo($"/reservation/{id}");
    }

    private void NavigateToAddReservation()
    {
        NavigationManager.NavigateTo("/reservation/add");
    }


    private string GetReservationStatus(string status)
    {
        return status switch
        {
            "Rezervováno" => "text-warning",
            "CheckedIn" => "text-primary",
            "Dokončeno" => "text-success",
            "Zrušeno" => "text-danger",
            _ => "badge badge-info"
        };
    }

}
