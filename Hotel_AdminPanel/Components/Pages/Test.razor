@page "/test"
@inject IReservationService ReservationService
@inject NavigationManager NavigationManager
@inject IRoomService RoomService
@inject ICustomerService CustomerService
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<div class="container mt-5">
    <div class="card border-0 shadow-sm mx-auto" style="max-width: 400px;">
        <div class="card-body">
            <h3 class="card-title text-center mb-4">Add Reservation Page</h3>
            <EditForm Model="reservation" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <select class="form-control" @onchange="OnRoomSelected">
                    <option value="">Select room</option>
                    @foreach (var room in rooms)
                    {
                        <option value="@room.Id">@room.RoomNumber - @room.RoomType.Type</option>
                    }
                </select>

                <input type="date" class="form-control" @onchange="OnDateSelectIn" />
                <input type="date" class="form-control" @onchange="OnDateSelectOut" />

            </EditForm>

            <span class="text-black">@selectedCustomer</span> <!-- Zobrazení vybraného zákazníka -->
        </div>
    </div>
</div>

@code {
    private Reservation reservation = new Reservation();
    private List<Customer> customers = new List<Customer>();
    private ICollection<Room> rooms = new List<Room>();
    private Room selectedRoom; // Přidáno pro sledování vybraného pokoje
    private string selectedCustomer = "";

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomersAsync();
        rooms = await RoomService.GetRooomsAsync();
    }

    private void OnRoomSelected(ChangeEventArgs e)
    {
        var roomId = int.Parse(e.Value.ToString());
        selectedRoom = rooms.FirstOrDefault(r => r.Id == roomId);
    }

    private async void OnDateSelectIn(ChangeEventArgs e)
    {
        reservation.CheckIn = DateTime.Parse(e.Value.ToString());

        if (selectedRoom != null)
        {
            bool isAvailable = await ReservationService.IsRoomAvailableAsync(selectedRoom.Id, reservation.CheckIn, reservation.CheckOut);
            if (!isAvailable)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Pokoj není dostupný na vybraný termín.");
                reservation.CheckIn = DateTime.Today; // Reset na výchozí nebo další dostupný termín
            }
        }
    }

    private async void OnDateSelectOut(ChangeEventArgs e)
    {
        reservation.CheckOut = DateTime.Parse(e.Value.ToString());

        if (selectedRoom != null)
        {
            bool isAvailable = await ReservationService.IsRoomAvailableAsync(selectedRoom.Id, reservation.CheckIn, reservation.CheckOut);
            if (!isAvailable)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Pokoj není dostupný na vybraný termín.");
                reservation.CheckOut = reservation.CheckIn.AddDays(1); // Reset na výchozí nebo další dostupný termín
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        await ReservationService.CreateReservationAsync(reservation);
        NavigationManager.NavigateTo("/reservations");
    }
}
